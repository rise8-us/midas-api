plugins {
    id 'org.springframework.boot' version '2.6.12'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'org.flywaydb.flyway' version '8.5.13'
    id 'antlr'
    id 'checkstyle'
    id 'jacoco'
    id "com.gorylenko.gradle-git-properties" version "2.3.2"
    id "org.sonarqube" version "3.3"
    id "org.owasp.dependencycheck" version "7.1.0.1"
}

apply from: "sonar.gradle"
apply from: "dependency.gradle"

group = 'mil.af.abms'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

wrapper {
    gradleVersion = "7.4.2"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
}

flyway {
    driver = 'com.mysql.cj.jdbc.Driver'
    url = 'jdbc:mysql://${System.env.MYSQL_HOST}:${System.env.MYSQL_PORT}/${System.env.MYSQL_DB_NAME}?useSSL=false'
    user = '${System.env.MYSQL_DB_ADMIN_USER}'
    password = '${System.env.MYSQL_DB_ADMIN_PASSWORD}'
    table = '${System.env.MYSQL_DB_NAME}'
}

sourceSets {
    main {
        java {
            srcDir '${buildDir.absolutePath}/generated-src/antlr/main'
        }
    }
}

dependencies {
    antlr 'org.antlr:antlr4:4.9.3'
    implementation 'org.yaml:snakeyaml:1.33'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.security:spring-security-messaging'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-core:5.7.2'
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:9.0.67'
    implementation 'org.hibernate:hibernate-validator:7.0.2.Final'
    implementation 'org.flywaydb:flyway-core:8.5.13'
    implementation 'org.flywaydb:flyway-mysql:8.5.13'
    implementation 'com.auth0:java-jwt:3.18.3'
    implementation 'org.gitlab4j:gitlab4j-api:4.19.0'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.261'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    runtimeOnly 'mysql:mysql-connector-java:8.0.28'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'com.h2database:h2:1.4.200'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

configurations.all {
    resolutionStrategy.dependencySubstitution {
        substitute(module('org.apache.logging.log4j:log4j-api')).using(module('org.apache.logging.log4j:log4j-api:2.18.0'))
        substitute(module('org.apache.logging.log4j:log4j-to-slf4j')).using(module('org.apache.logging.log4j:log4j-to-slf4j:2.18.0'))
        substitute(module('com.fasterxml.jackson.core:jackson-databind')).using(module('com.fasterxml.jackson.core:jackson-databind:2.14.0-rc1'))
    }
}

generateGrammarSource {
    arguments += ['-visitor', '-no-listener','-package', 'mil.af.abms.midas.api.search']

    doLast {
        copy {
            from 'build/generated-src/antlr/main/'
            include '*.*'
            into 'build/generated-src/antlr/main/mil/af/abms/midas/api/search'
        }
        project.delete fileTree('build/generated-src/antlr/main').include('*.*')
    }
}
compileJava.dependsOn generateGrammarSource

test {
    useJUnitPlatform()
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
        exceptionFormat 'full'
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'mil/af/abms/midas/api/search/RestQueryBaseVisitor**',  //Generated by ANTLR
                    'mil/af/abms/midas/api/search/RestQueryParser**',       //      |
                    'mil/af/abms/midas/api/search/RestQueryLexer**',        //Generated by ANTLR
                    'mil/af/abms/midas/clients/MySQLClient*',
                    'mil/af/abms/midas/config/Startup*',
                    'mil/af/abms/midas/config/AppConfig*',
                    '**/dto/**DTO**',
                    'mil/af/abms/midas/exception/**'
            ])
        }))
    }
    reports {
        xml.required = true
        html.required = true
    }
    dependsOn test
}

checkstyleMain.source = 'src/main/java'

tasks.register('lintGradle') {
    dependsOn checkstyleMain, checkstyleTest
}
